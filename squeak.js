// Generated by LiveScript 1.6.0
(function(){
  var ref$, last, join, map, types, speak, util, nodeUtil, our, out$ = typeof exports != 'undefined' && exports || this, slice$ = [].slice, arrayFrom$ = Array.from || function(x){return slice$.call(x);};
  out$.init = init;
  out$.squeakSet = squeakSet;
  out$.icomplain = icomplain;
  out$.complain = complain;
  out$.iwarn = iwarn;
  out$.iwarnOpts = iwarnOpts;
  out$.iwarnStr = iwarnStr;
  out$.ierror = ierror;
  out$.ierrorOpts = ierrorOpts;
  out$.ierrorStr = ierrorStr;
  out$.warn = warn;
  out$.warnOpts = warnOpts;
  out$.warnStr = warnStr;
  out$.error = error;
  out$.errorOpts = errorOpts;
  out$.errorStr = errorStr;
  out$.aerror = aerror;
  out$.aerrorOpts = aerrorOpts;
  ref$ = require("prelude-ls"), last = ref$.last, join = ref$.join, map = ref$.map;
  types = require('./types');
  speak = require('./speak');
  util = require('./util');
  nodeUtil = void 8;
  our = {
    pkg: {
      confSet: void 8
    },
    opts: {
      printStackTrace: void 8,
      complain: 'error',
      error: 'fatal',
      apiError: 'fatal'
    }
  };
  function icomplainOpts(opts){
    var msg, res$, i$, to$, func;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    msg = res$;
    func = our.opts.complain === 'error' ? ierror : iwarn;
    opts.stackRewind == null && (opts.stackRewind = 0);
    opts.stackRewind += 2;
    return func.apply(null, msg.concat([opts]));
  }
  function icomplain(){
    var msg, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    msg = res$;
    return icomplainOpts.apply(null, [{}].concat(arrayFrom$(msg)));
  }
  function complainOpts(opts){
    var msg, res$, i$, to$, func;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    msg = res$;
    func = our.opts.complain === 'error' ? error : warn;
    opts.stackRewind == null && (opts.stackRewind = 0);
    opts.stackRewind += 2;
    return func.apply(null, msg.concat([opts]));
  }
  function complain(){
    var msg, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    msg = res$;
    return complainOpts.apply(null, [{}].concat(arrayFrom$(msg)));
  }
  function iwarnOptsOpts(msg){
    return {
      msg: msg,
      type: 'iwarn',
      internal: true
    };
  }
  function iwarnOpts(opts){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplain(import$(opts, iwarnOptsOpts(args)));
  }
  function iwarnStr(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplainStr(iwarnOptsOpts(args));
  }
  function iwarn(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return iwarnOpts.apply(null, [{}].concat(arrayFrom$(args)));
  }
  function ierrorOptsOpts(msg){
    return {
      msg: msg,
      type: 'ierror',
      internal: true
    };
  }
  function ierrorOpts(opts){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplain(import$(opts, ierrorOptsOpts(args)));
  }
  function ierrorStr(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplainStr(ierrorOptsOpts(args));
  }
  function ierror(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return ierrorOpts.apply(null, [{}].concat(arrayFrom$(args)));
  }
  function warnOptsOpts(msg){
    return {
      msg: msg,
      type: 'warn',
      internal: false
    };
  }
  function warnOpts(opts){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplain(import$(opts, warnOptsOpts(args)));
  }
  function warnStr(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplainStr(warnOptsOpts(args));
  }
  function warn(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return warnOpts.apply(null, [{}].concat(arrayFrom$(args)));
  }
  function errorOptsOpts(msg){
    return {
      msg: msg,
      type: 'error',
      internal: false
    };
  }
  function errorOpts(opts){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplain(import$(opts, errorOptsOpts(args)));
  }
  function errorStr(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplainStr(errorOptsOpts(args));
  }
  function error(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return errorOpts.apply(null, [{}].concat(arrayFrom$(args)));
  }
  function aerrorOpts(opts){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return pcomplain((opts.msg = args, opts.type = 'aerror', opts.internal = false, opts));
  }
  function aerror(){
    var args, res$, i$, to$;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    return aerrorOpts.apply(null, [{}].concat(arrayFrom$(args)));
  }
  function init(arg$){
    var pkg, ref$;
    pkg = (ref$ = (arg$ != null
      ? arg$
      : {}).pkg) != null
      ? ref$
      : {};
    return import$(our.pkg, pkg);
  }
  function squeakSet(opts){
    our.pkg.confSet({
      source: opts,
      target: our.opts,
      name: 'err'
    });
    return this;
  }
  function squeakGet(key){
    if (!our.opts.hasOwnProperty(key)) {
      return complain('No such key', speak.brightRed(key));
    }
    return our.opts[key];
  }
  function pcomplain(opts){
    var ref$, msgStr, msgMainStr, code, allow, throws;
    ref$ = pcomplainProcess(opts), msgStr = ref$[0], msgMainStr = ref$[1], code = ref$[2], allow = ref$[3], throws = ref$[4];
    if (throws) {
      throw new Error(msgMainStr);
    }
    console.warn(msgStr);
    if (!allow) {
      code == null && (code = 1);
      process.exit(code);
    }
  }
  function pcomplainStr(opts){
    var ref$, msgStr, _;
    ref$ = pcomplainProcess(opts), msgStr = ref$[0], _ = slice$.call(ref$, 1);
    return msgStr;
  }
  function pcomplainProcess(opts){
    var msg, type, internal, code, stackRewind, ref$, errorType, apiErrorType, printStackTraceOpt, msgBegin, msgMain, msgEnd, printFileAndLine, printStackTrace, allow, throws, that, bulletColor, stack, funcname, filename, lineNum, msgBeginStr, msgMainStr, msgEndStr, msgStr;
    msg = opts.msg, type = opts.type, internal = opts.internal, code = opts.code, stackRewind = (ref$ = opts.stackRewind) != null ? ref$ : 0;
    errorType = (ref$ = opts.error) != null
      ? ref$
      : our.opts.error;
    apiErrorType = (ref$ = opts.apiError) != null
      ? ref$
      : our.opts.apiError;
    printStackTraceOpt = (ref$ = opts.printStackTrace) != null
      ? ref$
      : our.opts.printStackTrace;
    if (!isPhantom()) {
      if (!nodeUtil) {
        nodeUtil = require('util');
      }
    } else {
      nodeUtil = {
        inspect: function(){
          return toArray(arguments).map(function(it){
            if (it.toString != null) {
              return it.toString();
            } else {
              return it;
            }
          }).join(' ');
        }
      };
    }
    msg = map(function(it){
      if (types.isObj(it)) {
        return nodeUtil.inspect(it);
      } else {
        return it;
      }
    }, msg);
    msgBegin = [];
    msgMain = msg;
    msgEnd = [];
    printFileAndLine = false;
    if (errorType !== 'fatal' && errorType !== 'allow' && errorType !== 'throw') {
      errorType = 'fatal';
    }
    if (apiErrorType !== 'fatal' && apiErrorType !== 'allow' && apiErrorType !== 'throw') {
      apiErrorType = 'fatal';
    }
    if (type === 'aerror') {
      if (!msgMain.length) {
        msgMain.push("bad call.");
      }
      msgBegin.push("Api error:");
      printFileAndLine = true;
      printStackTrace = true;
      allow = apiErrorType === 'allow';
      throws = apiErrorType === 'throw';
    } else if (type === 'ierror') {
      if (!msgMain.length) {
        msgMain.push("something's wrong.");
      }
      msgBegin.push("Internal error:");
      printFileAndLine = true;
      printStackTrace = true;
      allow = errorType === 'allow';
      throws = errorType === 'throw';
    } else if (type === 'iwarn') {
      if (!msgMain.length) {
        msgMain.push("something's wrong.");
      }
      msgBegin.push("Internal warning:");
      printFileAndLine = true;
      printStackTrace = true;
      allow = true;
      throws = false;
    } else if (type === 'error') {
      if (!msgMain.length) {
        msgMain.push("something's wrong.");
      }
      msgBegin.push("Error:");
      printFileAndLine = false;
      printStackTrace = false;
      allow = errorType === 'allow';
      throws = errorType === 'throw';
    } else if (type === 'warn') {
      if (!msgMain.length) {
        msgMain.push("something's wrong.");
      }
      msgBegin.push("Warning:");
      printFileAndLine = false;
      printStackTrace = false;
      allow = true;
      throws = false;
    }
    if ((that = printStackTraceOpt) != null) {
      printStackTrace = that;
    }
    if (throws) {
      speak.yellow = speak.green = speak.brightRed = speak.red = function(it){
        if (types.isArr(it)) {
          return it[0];
        } else {
          return it;
        }
      };
    }
    if (allow) {
      bulletColor = speak.brightRed;
    } else {
      bulletColor = speak.red;
    }
    if (printStackTrace || printFileAndLine) {
      ref$ = getStack(stackRewind), stack = ref$[0], funcname = ref$[1], filename = ref$[2], lineNum = ref$[3];
    }
    msgBegin.unshift(function(){
      var ind, spa, bul;
      ind = repeatString$(' ', speak.bulletGet('indent'));
      spa = repeatString$(' ', speak.bulletGet('spacing'));
      bul = bulletColor([
        speak.bullet(), {
          warnOnError: false
        }
      ]);
      return ind + bul + spa;
    }());
    if (printFileAndLine) {
      msgEnd.push("(" + (speak.yellow([
        filename, {
          warnOnError: false
        }
      ]) + "") + function(){
        if (funcname) {
          return ":" + (speak.green([
            funcname, {
              warnOnError: false
            }
          ]) + "");
        } else {
          return '';
        }
      }() + ":" + (speak.brightRed([
        lineNum, {
          warnOnError: false
        }
      ]) + "") + ")");
    }
    if (printStackTrace) {
      msgEnd.push("\n");
      if (typeof m != 'undefined' && m !== null) {
        msgEnd.push(m[2]);
      } else {
        msgEnd.push(stack);
      }
    }
    msgEnd.push("\n");
    msgBeginStr = join('', msgBegin);
    msgMainStr = join(' ', msgMain);
    msgEndStr = join(' ', msgEnd);
    msgStr = join(' ', util.array(msgBeginStr, msgMainStr, msgEndStr));
    return [msgStr, msgMainStr, code, allow, throws];
  }
  function getStack(stackRewind){
    var stack, ref$, funcname, filename, lineNum;
    stack = (new Error).stack;
    if (stack == null) {
      stack = '';
    }
    stack = stack.replace(/^\s*\S+\s+/, '   ');
    ref$ = function(){
      var regex, myStack, m;
      regex = repeatString$(".*\n", 3 + stackRewind);
      myStack = stack.replace(RegExp('^' + regex), '');
      if (m = myStack.match(/^\s+at\s+(\S+)\s*\((.+?):(\d+):\d+\)/)) {
        return [m[1], m[2], m[3]];
      } else if (m = myStack.match(/^\s+at\s+(.+?):(\d+):\d+/)) {
        return [void 8, m[1], m[2]];
      } else {
        return ["«unknown-file»", "«unknown-line»"];
      }
    }(), funcname = ref$[0], filename = ref$[1], lineNum = ref$[2];
    return [stack, funcname, filename, lineNum];
  }
  function isPhantom(){
    if ((typeof window != 'undefined' && window !== null) && window.callPhantom && window._phantom) {
      return true;
    }
  }
  function toArray(){
    var i$, x$, ref$, len$, results$ = [];
    for (i$ = 0, len$ = (ref$ = arguments[0]).length; i$ < len$; ++i$) {
      x$ = ref$[i$];
      results$.push(x$);
    }
    return results$;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function repeatString$(str, n){
    for (var r = ''; n > 0; (n >>= 1) && (str += str)) if (n & 1) r += str;
    return r;
  }
}).call(this);
